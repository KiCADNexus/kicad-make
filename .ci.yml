variables:
  DESIGNS_PATH: $CI_PROJECT_DIR/tests/designs
  DEBIAN_FRONTEND: "noninteractive"
  GIT_DEPTH: 1

include:
  - project: repositories/antmicro-pcb-release-ci-template
    ref: main
    file: .ci.yml

stages:
  - test
  - build
  - build_docker
  - test_docker
  - build_docs
  - deploy

build-kmake:
  image: "debian:bookworm"
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: none
  script:
    - apt update
    - apt install -qqy python3 python3-pip git
    - python3 -m pip wheel -w dist .
  artifacts:
    paths:
      - dist
  only:
    - main
    - merge_requests

.setup-docker:
  image: "debian:bookworm"
  variables:
    DOCKER_DATA_ROOT: "$CI_PROJECT_DIR/.docker_data_root"
    GIT_SUBMODULE_STRATEGY: none
  before_script:
    - apt -qqy update > /dev/null
    - apt -qqy --no-install-recommends install docker.io cgroupfs-mount crun fuse-overlayfs pigz ca-certificates > /dev/null
    - cgroupfs-mount
    - mkdir -p "$DOCKER_DATA_ROOT"

.start-docker: &start-docker |-
  dockerd --data-root=$DOCKER_DATA_ROOT -s fuse-overlayfs --add-runtime=crun=/usr/bin/crun --default-runtime=crun --config-file="" > /dev/null 2>&1 &
  while ! test -S /var/run/docker.sock; do echo "Waiting for Docker..." && sleep 1; done; docker info
  trap "kill $(cat /var/run/docker.pid)" EXIT
  docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY

.build-kmake-docker-image:
  extends: .setup-docker
  stage: build_docker
  dependencies:
    - build-kmake
  only:
    - main
    - merge_requests
  script:
    - *start-docker
    - if [[ "${CI_COMMIT_REF_SLUG}" == "main" ]]; then IMG_SUFFIX="-testing-${CI_COMMIT_SHORT_SHA}"; fi # do not deploy untested images directly to `kmake-kicad*:main`, it might broke all hardware CI
    - IMAGE_NAME="${CI_REGISTRY_IMAGE}/kmake-${KICAD_VERSION}:${CI_COMMIT_REF_SLUG}${IMG_SUFFIX}"
    - DOCKER_BUILDKIT=1 docker build --build-arg BASE_IMAGE=${KICAD_IMAGE}/${KICAD_VERSION} --build-arg BASE_TAG=main -t $IMAGE_NAME .
    - docker push $IMAGE_NAME

build-deploy-testing-kmake-kicad7:
  extends: .build-kmake-docker-image
  variables:
    KICAD_VERSION: "kicad7"

build-deploy-testing-kmake-kicad8:
  extends: .build-kmake-docker-image
  variables:
    KICAD_VERSION: "kicad8"

.test-commands:
  stage: test_docker
  dependencies: []
  script:
    - apt update
    - apt install -y git
    - git submodule update --init --recursive tests/test-designs
    - pip3 install --break-system-packages -e ".[dev]"
    - pytest --cov-report term --cov-report html:htmlcov --cov=src -n auto
  artifacts:
    expire_in: 2 week
    paths:
      - htmlcov
      - tests/results
      - dist

test-kicad7-docker:
  image: $CI_REGISTRY_IMAGE/kmake-kicad7:${CI_COMMIT_REF_SLUG}
  extends: .test-commands
  only:
    - merge_requests

test-kicad8-docker:
  image: $CI_REGISTRY_IMAGE/kmake-kicad8:${CI_COMMIT_REF_SLUG}
  extends: .test-commands
  allow_failure: true
  only:
    - merge_requests

test-kicad7-docker-main:
  image: $CI_REGISTRY_IMAGE/kmake-kicad7:main-testing-${CI_COMMIT_SHORT_SHA}
  extends: .test-commands
  only:
    - main

test-kicad8-docker-main:
  image: $CI_REGISTRY_IMAGE/kmake-kicad8:main-testing-${CI_COMMIT_SHORT_SHA}
  extends: .test-commands
  allow_failure: true
  only:
    - main

.test-setup: &test-setup
  image: python:3.11
  stage: test
  variables:
    GIT_SUBMODULE_STRATEGY: none
  before_script:
    - pip3 install black mypy ruff

black:
  <<: *test-setup
  script:
    - black --check .

mypy:
  <<: *test-setup
  script:
    - mypy .

ruff:
  <<: *test-setup
  script:
    - ruff check .

ohp-check:
  stage: test_docker
  when: never

assembly-release:
  stage: test_docker
  when: never

debug:
  stage: test_docker
  when: never

documentation-release:
  stage: test_docker
  image: $CI_REGISTRY_IMAGE/kmake-kicad7:${CI_COMMIT_REF_SLUG}
  variables: null
  when: always
  only:
    - main
    - merge_requests

ohp-release:
  stage: test_docker
  dependencies: []
  when: never
  
hrafn-release:
  stage: test_docker
  when: never
  
deploy-hrafn-assets:
  stage: test_docker
  dependencies: []
  when: never


customer-release:
  stage: test_docker
  image: $CI_REGISTRY_IMAGE/kmake-kicad7:${CI_COMMIT_REF_SLUG}
  variables: null
  when: always
  only:
    - main
    - merge_requests

production-release:
  stage: test_docker
  image: $CI_REGISTRY_IMAGE/kmake-kicad7:${CI_COMMIT_REF_SLUG}
  when: always
  only:
    - main
    - merge_requests

build-docs:
  image: $CI_DOCS_DOCKER_IMAGE
  stage: build_docs
  variables:
    SCALENODE_CPU: 2
    SCALENODE_RAM: 8000
    SCALENODE_DISK: 20
    GIT_SUBMODULE_STRATEGY: none
  before_script:
    - pip3 install -r docs/requirements.txt
    # We need to be able to load kmake to generate usage docs,
    # but we don't really need it working properly
    # create dummy pcbnew, so we don't have to install kicad
    - echo -e "class BOARD:\n    pass\nclass FOOTPRINT:\n    pass" > /tmp/pcbnew.py
    # install kmake as it is required to generate usage page
    - pip3 install .
  script:
    - cd docs
    - PYTHONPATH="/tmp/" make html latexpdf
    - cp build/latex/*.pdf build/html/
    - tar cf ../$CI_DOCS_ARCHIVE -C build/html/ .
  artifacts:
    paths:
      - $CI_DOCS_ARCHIVE
  only:
    - main
    - merge_requests

deploy-docs:
  image: $CI_DOCS_DOCKER_IMAGE
  variables:
    GIT_STRATEGY: none
    SCALENODE_CPU: 2
    SCALENODE_RAM: 8000
    SCALENODE_DISK: 20
  dependencies:
    - build-docs
  stage: deploy
  tags: ["docs"]
  script: echo 'Deploying docs'
  artifacts:
    paths:
      - $CI_DOCS_ARCHIVE
  only:
    refs:
      - main

.deploy-main-kmake-docker-image:
  extends: .setup-docker
  stage: deploy
  dependencies: []
  only:
    refs:
      - main
  script:
    - *start-docker
    - TARGET_NAME="${CI_REGISTRY_IMAGE}/kmake-${KICAD_VERSION}:main"
    - SOURCE_NAME="${CI_REGISTRY_IMAGE}/kmake-${KICAD_VERSION}:main-testing-${CI_COMMIT_SHORT_SHA}"
    - docker tag $SOURCE_NAME $TARGET_NAME
    - docker rmi $SOURCE_NAME
    - docker push $TARGET_NAME

deploy-main-kmake-kicad7:
  extends: .deploy-main-kmake-docker-image
  variables:
    KICAD_VERSION: "kicad7"

deploy-main-kmake-kicad8:
  extends: .deploy-main-kmake-docker-image
  variables:
    KICAD_VERSION: "kicad8"